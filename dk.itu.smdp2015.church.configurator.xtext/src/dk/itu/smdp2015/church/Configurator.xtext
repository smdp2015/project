grammar dk.itu.smdp2015.church.Configurator with org.eclipse.xtext.common.Terminals

import "http://itu.dk/smdp/configurator" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Configurator:
	'configurator' name=ID 
	(description=STRING)?
	'{' parameters+=AbstractParameter ( ','? parameters+=AbstractParameter)* '}';

AbstractParameter:
	ParameterGroup | Parameter;
	
ParameterGroup:
	'group'	name=ID
	(description=STRING)?
	( ('visible-if' visibility=Expression)?
	& ('constraints' '{' constraints+=Constraint ( ',' constraints+=Constraint)* ','? '}' )?
	& '{' parameters+=AbstractParameter ( ','? parameters+=AbstractParameter)* ','? '}' );

Parameter:
	'parameter'	name=ID
	(description=STRING)?
	( (mandatory?='mandatory'|'optional')? 
	& ('visible-if' visibility=Expression)?
	& ('constraints' '{' constraints+=Constraint ( ',' constraints+=Constraint)* '}' )?
	& 'values' valueRange=ValueRange );

ValueRange:
	Enumerated | Bounded;

Enumerated returns Enumerated:
	'(' values+=Expression ( ',' values+=Expression)* ')';

Bounded returns Bounded:
	'[' lowerBound=Expression ';' upperBound=Expression ']';

Constraint:
	 expr=Expression;

Expression:
	Disjunctive;

enum DisjunctiveOperator returns BinaryOperator:
	disjunction = 'or' ;

Disjunctive returns Expression:
	Conjunctive ( {Binary.left=current} operator=DisjunctiveOperator right=Conjunctive )*;

enum ConjunctiveOperator returns BinaryOperator:
	conjunction = 'and';

Conjunctive returns Expression:
	Equality ( {Binary.left=current} operator=ConjunctiveOperator right=Equality )*;

enum EqualityOperator returns BinaryOperator:
	equal = '==' | notEqual = '!=';

Equality returns Expression:
	Comparative ( {Binary.left=current} operator=EqualityOperator right=Comparative )*;

enum ComparativeOperator returns BinaryOperator:
	lessThan = '<' | lessThanEqual = '<=' | greaterThan = '>' | greaterThanEqual = '>=' ;

Comparative returns Expression:
	Additive ( {Binary.left=current} operator=ComparativeOperator right=Additive )*;

enum AdditiveOperator returns BinaryOperator:
	addition = '+' | subtraction = '-';

Additive returns Expression:
	Multiplicative ( {Binary.left=current} operator=AdditiveOperator right=Multiplicative )*;

enum MultiplicativeOperator returns BinaryOperator:
	multiplication = '*' | division = '/';

Multiplicative returns Expression:
	Primitive ( {Binary.left=current} operator=MultiplicativeOperator right=Primitive )*;

Primitive returns Expression:	
	Unary | Scalar | InRange | Integer | Double | Boolean | String0 | Identifier | '(' Expression ')';

enum UnaryOperator:
	inversion = 'not' | negation = '-';

Unary:
	operator=UnaryOperator inner=Primitive;

enum ScalarOperator:
	sum = 'sum' | min = 'min' | max = 'max';

Scalar:
	operator=ScalarOperator '(' id=[ParameterGroup] ')';

Constant:
	Integer | Double | Boolean | String0;

InRange:
	parameter=[Parameter] 'in' range=ValueRange;

Integer:
	value=EInt;

Double:
	value=EDouble;

Boolean:
	value=EBoolean;

String0 returns String:
	value=STRING;

Identifier:
	id=[Parameter];

EInt returns ecore::EInt:
	/* '-'? */ INT;

EDouble returns ecore::EDouble:
	/* '-'? */ INT? '.' INT (('E'|'e') '-'? INT)?;

EBoolean returns ecore::EBoolean:
	'true' | 'false';
