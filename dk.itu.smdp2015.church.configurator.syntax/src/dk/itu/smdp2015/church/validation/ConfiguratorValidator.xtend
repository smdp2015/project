/*
 * generated by Xtext
 */
package dk.itu.smdp2015.church.validation

import org.eclipse.xtext.validation.Check
import dk.itu.smdp2015.church.model.configurator.Bounded
import dk.itu.smdp2015.church.model.configurator.Constant
import dk.itu.smdp2015.church.model.configurator.ConfiguratorPackage

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class ConfiguratorValidator extends AbstractConfiguratorValidator {

    public static val INVALID_BOUND = 'invalidBound'

	@Check
	def checkBoundedExpressionLowerBoundIsConstant(Bounded bounded) {
		if (!Constant.isAssignableFrom(bounded.lowerBound.class)) {
			warning('Lower bound should be a constant.', ConfiguratorPackage.Literals.BOUNDED__LOWER_BOUND, INVALID_BOUND) 			
		}
	}

	@Check
	def checkBoundedExpressionUpperBoundIsConstant(Bounded bounded) {
		if (!Constant.isAssignableFrom(bounded.upperBound.class)) {
			warning('Upper bound should be a constant.', ConfiguratorPackage.Literals.BOUNDED__UPPER_BOUND, INVALID_BOUND) 			
		}
	}
	
	@Check
	def checkBoundedExpressionSimilarBoundsType(Bounded bounded) {
		if (bounded.lowerBound.class != bounded.upperBound.class) {
			warning('Lower and upper bound should have similar type.', ConfiguratorPackage.Literals.BOUNDED__LOWER_BOUND, INVALID_BOUND) 
			warning('Lower and upper bound should have similar type.', ConfiguratorPackage.Literals.BOUNDED__UPPER_BOUND, INVALID_BOUND) 
		}
	}

}
