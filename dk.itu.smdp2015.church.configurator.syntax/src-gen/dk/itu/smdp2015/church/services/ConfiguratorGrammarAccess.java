/*
* generated by Xtext
*/
package dk.itu.smdp2015.church.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ConfiguratorGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ConfiguratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Configurator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfiguratorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersAbstractParameterParserRuleCall_4_0 = (RuleCall)cParametersAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParametersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParametersAbstractParameterParserRuleCall_5_1_0 = (RuleCall)cParametersAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Configurator:
		//	"configurator" name=ID description=STRING? "{" parameters+=AbstractParameter (","? parameters+=AbstractParameter)*
		//	"}";
		public ParserRule getRule() { return rule; }

		//"configurator" name=ID description=STRING? "{" parameters+=AbstractParameter (","? parameters+=AbstractParameter)* "}"
		public Group getGroup() { return cGroup; }

		//"configurator"
		public Keyword getConfiguratorKeyword_0() { return cConfiguratorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//parameters+=AbstractParameter
		public Assignment getParametersAssignment_4() { return cParametersAssignment_4; }

		//AbstractParameter
		public RuleCall getParametersAbstractParameterParserRuleCall_4_0() { return cParametersAbstractParameterParserRuleCall_4_0; }

		//(","? parameters+=AbstractParameter)*
		public Group getGroup_5() { return cGroup_5; }

		//","?
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//parameters+=AbstractParameter
		public Assignment getParametersAssignment_5_1() { return cParametersAssignment_5_1; }

		//AbstractParameter
		public RuleCall getParametersAbstractParameterParserRuleCall_5_1_0() { return cParametersAbstractParameterParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class AbstractParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterGroupParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractParameter:
		//	ParameterGroup | Parameter;
		public ParserRule getRule() { return rule; }

		//ParameterGroup | Parameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//ParameterGroup
		public RuleCall getParameterGroupParserRuleCall_0() { return cParameterGroupParserRuleCall_0; }

		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }
	}

	public class ParameterGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cVisibleIfKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cVisibilityExpressionParserRuleCall_3_0_1_0 = (RuleCall)cVisibilityAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cConstraintsKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cConstraintsAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cConstraintsConstraintParserRuleCall_3_1_2_0 = (RuleCall)cConstraintsAssignment_3_1_2.eContents().get(0);
		private final Group cGroup_3_1_3 = (Group)cGroup_3_1.eContents().get(3);
		private final Keyword cCommaKeyword_3_1_3_0 = (Keyword)cGroup_3_1_3.eContents().get(0);
		private final Assignment cConstraintsAssignment_3_1_3_1 = (Assignment)cGroup_3_1_3.eContents().get(1);
		private final RuleCall cConstraintsConstraintParserRuleCall_3_1_3_1_0 = (RuleCall)cConstraintsAssignment_3_1_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_1_4 = (Keyword)cGroup_3_1.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_3_1_5 = (Keyword)cGroup_3_1.eContents().get(5);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParametersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cParametersAbstractParameterParserRuleCall_3_2_1_0 = (RuleCall)cParametersAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_2_2 = (Group)cGroup_3_2.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_2_0 = (Keyword)cGroup_3_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_3_2_2_1 = (Assignment)cGroup_3_2_2.eContents().get(1);
		private final RuleCall cParametersAbstractParameterParserRuleCall_3_2_2_1_0 = (RuleCall)cParametersAssignment_3_2_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_2_3 = (Keyword)cGroup_3_2.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_3_2_4 = (Keyword)cGroup_3_2.eContents().get(4);
		
		//ParameterGroup:
		//	"group" name=ID description=STRING? (("visible-if" visibility=Expression)? & ("constraints" "{"
		//	constraints+=Constraint ("," constraints+=Constraint)* ","? "}")? & "{" parameters+=AbstractParameter (","?
		//	parameters+=AbstractParameter)* ","? "}");
		public ParserRule getRule() { return rule; }

		//"group" name=ID description=STRING? (("visible-if" visibility=Expression)? & ("constraints" "{" constraints+=Constraint
		//("," constraints+=Constraint)* ","? "}")? & "{" parameters+=AbstractParameter (","? parameters+=AbstractParameter)*
		//","? "}")
		public Group getGroup() { return cGroup; }

		//"group"
		public Keyword getGroupKeyword_0() { return cGroupKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }

		//("visible-if" visibility=Expression)? & ("constraints" "{" constraints+=Constraint ("," constraints+=Constraint)* ","?
		//"}")? & "{" parameters+=AbstractParameter (","? parameters+=AbstractParameter)* ","? "}"
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//("visible-if" visibility=Expression)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"visible-if"
		public Keyword getVisibleIfKeyword_3_0_0() { return cVisibleIfKeyword_3_0_0; }

		//visibility=Expression
		public Assignment getVisibilityAssignment_3_0_1() { return cVisibilityAssignment_3_0_1; }

		//Expression
		public RuleCall getVisibilityExpressionParserRuleCall_3_0_1_0() { return cVisibilityExpressionParserRuleCall_3_0_1_0; }

		//("constraints" "{" constraints+=Constraint ("," constraints+=Constraint)* ","? "}")?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"constraints"
		public Keyword getConstraintsKeyword_3_1_0() { return cConstraintsKeyword_3_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1_1() { return cLeftCurlyBracketKeyword_3_1_1; }

		//constraints+=Constraint
		public Assignment getConstraintsAssignment_3_1_2() { return cConstraintsAssignment_3_1_2; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_3_1_2_0() { return cConstraintsConstraintParserRuleCall_3_1_2_0; }

		//("," constraints+=Constraint)*
		public Group getGroup_3_1_3() { return cGroup_3_1_3; }

		//","
		public Keyword getCommaKeyword_3_1_3_0() { return cCommaKeyword_3_1_3_0; }

		//constraints+=Constraint
		public Assignment getConstraintsAssignment_3_1_3_1() { return cConstraintsAssignment_3_1_3_1; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_3_1_3_1_0() { return cConstraintsConstraintParserRuleCall_3_1_3_1_0; }

		//","?
		public Keyword getCommaKeyword_3_1_4() { return cCommaKeyword_3_1_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_1_5() { return cRightCurlyBracketKeyword_3_1_5; }

		//"{" parameters+=AbstractParameter (","? parameters+=AbstractParameter)* ","? "}"
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_2_0() { return cLeftCurlyBracketKeyword_3_2_0; }

		//parameters+=AbstractParameter
		public Assignment getParametersAssignment_3_2_1() { return cParametersAssignment_3_2_1; }

		//AbstractParameter
		public RuleCall getParametersAbstractParameterParserRuleCall_3_2_1_0() { return cParametersAbstractParameterParserRuleCall_3_2_1_0; }

		//(","? parameters+=AbstractParameter)*
		public Group getGroup_3_2_2() { return cGroup_3_2_2; }

		//","?
		public Keyword getCommaKeyword_3_2_2_0() { return cCommaKeyword_3_2_2_0; }

		//parameters+=AbstractParameter
		public Assignment getParametersAssignment_3_2_2_1() { return cParametersAssignment_3_2_2_1; }

		//AbstractParameter
		public RuleCall getParametersAbstractParameterParserRuleCall_3_2_2_1_0() { return cParametersAbstractParameterParserRuleCall_3_2_2_1_0; }

		//","?
		public Keyword getCommaKeyword_3_2_3() { return cCommaKeyword_3_2_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2_4() { return cRightCurlyBracketKeyword_3_2_4; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cUnorderedGroup_3.eContents().get(0);
		private final Assignment cOptionalAssignment_3_0_0 = (Assignment)cAlternatives_3_0.eContents().get(0);
		private final Keyword cOptionalOptionalKeyword_3_0_0_0 = (Keyword)cOptionalAssignment_3_0_0.eContents().get(0);
		private final Keyword cMandatoryKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cVisibleIfKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cVisibilityAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cVisibilityExpressionParserRuleCall_3_1_1_0 = (RuleCall)cVisibilityAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cDefaultValueKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cDefaultAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cDefaultExpressionParserRuleCall_3_2_1_0 = (RuleCall)cDefaultAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cConstraintsKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Assignment cConstraintsAssignment_3_3_2 = (Assignment)cGroup_3_3.eContents().get(2);
		private final RuleCall cConstraintsConstraintParserRuleCall_3_3_2_0 = (RuleCall)cConstraintsAssignment_3_3_2.eContents().get(0);
		private final Group cGroup_3_3_3 = (Group)cGroup_3_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_3_0 = (Keyword)cGroup_3_3_3.eContents().get(0);
		private final Assignment cConstraintsAssignment_3_3_3_1 = (Assignment)cGroup_3_3_3.eContents().get(1);
		private final RuleCall cConstraintsConstraintParserRuleCall_3_3_3_1_0 = (RuleCall)cConstraintsAssignment_3_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3_4 = (Keyword)cGroup_3_3.eContents().get(4);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final Keyword cValuesKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cValueRangeAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cValueRangeValueRangeParserRuleCall_3_4_1_0 = (RuleCall)cValueRangeAssignment_3_4_1.eContents().get(0);
		
		//Parameter:
		//	"parameter" name=ID description=STRING? ((optional?="optional" | "mandatory")? & ("visible-if"
		//	visibility=Expression)? & ("default-value" default=Expression)? & ("constraints" "{" constraints+=Constraint (","
		//	constraints+=Constraint)* "}")? & "values" valueRange=ValueRange);
		public ParserRule getRule() { return rule; }

		//"parameter" name=ID description=STRING? ((optional?="optional" | "mandatory")? & ("visible-if" visibility=Expression)? &
		//("default-value" default=Expression)? & ("constraints" "{" constraints+=Constraint ("," constraints+=Constraint)*
		//"}")? & "values" valueRange=ValueRange)
		public Group getGroup() { return cGroup; }

		//"parameter"
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }

		//(optional?="optional" | "mandatory")? & ("visible-if" visibility=Expression)? & ("default-value" default=Expression)? &
		//("constraints" "{" constraints+=Constraint ("," constraints+=Constraint)* "}")? & "values" valueRange=ValueRange
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//(optional?="optional" | "mandatory")?
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//optional?="optional"
		public Assignment getOptionalAssignment_3_0_0() { return cOptionalAssignment_3_0_0; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_3_0_0_0() { return cOptionalOptionalKeyword_3_0_0_0; }

		//"mandatory"
		public Keyword getMandatoryKeyword_3_0_1() { return cMandatoryKeyword_3_0_1; }

		//("visible-if" visibility=Expression)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"visible-if"
		public Keyword getVisibleIfKeyword_3_1_0() { return cVisibleIfKeyword_3_1_0; }

		//visibility=Expression
		public Assignment getVisibilityAssignment_3_1_1() { return cVisibilityAssignment_3_1_1; }

		//Expression
		public RuleCall getVisibilityExpressionParserRuleCall_3_1_1_0() { return cVisibilityExpressionParserRuleCall_3_1_1_0; }

		//("default-value" default=Expression)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"default-value"
		public Keyword getDefaultValueKeyword_3_2_0() { return cDefaultValueKeyword_3_2_0; }

		//default=Expression
		public Assignment getDefaultAssignment_3_2_1() { return cDefaultAssignment_3_2_1; }

		//Expression
		public RuleCall getDefaultExpressionParserRuleCall_3_2_1_0() { return cDefaultExpressionParserRuleCall_3_2_1_0; }

		//("constraints" "{" constraints+=Constraint ("," constraints+=Constraint)* "}")?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"constraints"
		public Keyword getConstraintsKeyword_3_3_0() { return cConstraintsKeyword_3_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_3_1() { return cLeftCurlyBracketKeyword_3_3_1; }

		//constraints+=Constraint
		public Assignment getConstraintsAssignment_3_3_2() { return cConstraintsAssignment_3_3_2; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_3_3_2_0() { return cConstraintsConstraintParserRuleCall_3_3_2_0; }

		//("," constraints+=Constraint)*
		public Group getGroup_3_3_3() { return cGroup_3_3_3; }

		//","
		public Keyword getCommaKeyword_3_3_3_0() { return cCommaKeyword_3_3_3_0; }

		//constraints+=Constraint
		public Assignment getConstraintsAssignment_3_3_3_1() { return cConstraintsAssignment_3_3_3_1; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_3_3_3_1_0() { return cConstraintsConstraintParserRuleCall_3_3_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3_4() { return cRightCurlyBracketKeyword_3_3_4; }

		//"values" valueRange=ValueRange
		public Group getGroup_3_4() { return cGroup_3_4; }

		//"values"
		public Keyword getValuesKeyword_3_4_0() { return cValuesKeyword_3_4_0; }

		//valueRange=ValueRange
		public Assignment getValueRangeAssignment_3_4_1() { return cValueRangeAssignment_3_4_1; }

		//ValueRange
		public RuleCall getValueRangeValueRangeParserRuleCall_3_4_1_0() { return cValueRangeValueRangeParserRuleCall_3_4_1_0; }
	}

	public class ValueRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueRange");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumeratedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoundedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ValueRange:
		//	Enumerated | Bounded;
		public ParserRule getRule() { return rule; }

		//Enumerated | Bounded
		public Alternatives getAlternatives() { return cAlternatives; }

		//Enumerated
		public RuleCall getEnumeratedParserRuleCall_0() { return cEnumeratedParserRuleCall_0; }

		//Bounded
		public RuleCall getBoundedParserRuleCall_1() { return cBoundedParserRuleCall_1; }
	}

	public class EnumeratedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enumerated");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesExpressionParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesExpressionParserRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Enumerated:
		//	"(" values+=Expression ("," values+=Expression)* ")";
		public ParserRule getRule() { return rule; }

		//"(" values+=Expression ("," values+=Expression)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//values+=Expression
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//Expression
		public RuleCall getValuesExpressionParserRuleCall_1_0() { return cValuesExpressionParserRuleCall_1_0; }

		//("," values+=Expression)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//values+=Expression
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//Expression
		public RuleCall getValuesExpressionParserRuleCall_2_1_0() { return cValuesExpressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class BoundedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bounded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundExpressionParserRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundExpressionParserRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Bounded:
		//	"[" lowerBound=Expression ";" upperBound=Expression "]";
		public ParserRule getRule() { return rule; }

		//"[" lowerBound=Expression ";" upperBound=Expression "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//lowerBound=Expression
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//Expression
		public RuleCall getLowerBoundExpressionParserRuleCall_1_0() { return cLowerBoundExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//upperBound=Expression
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }

		//Expression
		public RuleCall getUpperBoundExpressionParserRuleCall_3_0() { return cUpperBoundExpressionParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cDescriptionKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cDescriptionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cDescriptionAssignment_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Constraint:
		//	("description" description=STRING)? expression=Expression;
		public ParserRule getRule() { return rule; }

		//("description" description=STRING)? expression=Expression
		public Group getGroup() { return cGroup; }

		//("description" description=STRING)?
		public Group getGroup_0() { return cGroup_0; }

		//"description"
		public Keyword getDescriptionKeyword_0_0() { return cDescriptionKeyword_0_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_0_1() { return cDescriptionAssignment_0_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_0_1_0() { return cDescriptionSTRINGTerminalRuleCall_0_1_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cLogicalOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	LogicalOr;
		public ParserRule getRule() { return rule; }

		//LogicalOr
		public RuleCall getLogicalOrParserRuleCall() { return cLogicalOrParserRuleCall; }
	}

	public class LogicalOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorLogicalOrOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLogicalAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LogicalOr returns Expression:
		//	LogicalAnd ({Binary.left=current} operator=LogicalOrOperator right=LogicalAnd)*;
		public ParserRule getRule() { return rule; }

		//LogicalAnd ({Binary.left=current} operator=LogicalOrOperator right=LogicalAnd)*
		public Group getGroup() { return cGroup; }

		//LogicalAnd
		public RuleCall getLogicalAndParserRuleCall_0() { return cLogicalAndParserRuleCall_0; }

		//({Binary.left=current} operator=LogicalOrOperator right=LogicalAnd)*
		public Group getGroup_1() { return cGroup_1; }

		//{Binary.left=current}
		public Action getBinaryLeftAction_1_0() { return cBinaryLeftAction_1_0; }

		//operator=LogicalOrOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//LogicalOrOperator
		public RuleCall getOperatorLogicalOrOperatorEnumRuleCall_1_1_0() { return cOperatorLogicalOrOperatorEnumRuleCall_1_1_0; }

		//right=LogicalAnd
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//LogicalAnd
		public RuleCall getRightLogicalAndParserRuleCall_1_2_0() { return cRightLogicalAndParserRuleCall_1_2_0; }
	}

	public class LogicalAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorLogicalAndOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LogicalAnd returns Expression:
		//	Equality ({Binary.left=current} operator=LogicalAndOperator right=Equality)*;
		public ParserRule getRule() { return rule; }

		//Equality ({Binary.left=current} operator=LogicalAndOperator right=Equality)*
		public Group getGroup() { return cGroup; }

		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }

		//({Binary.left=current} operator=LogicalAndOperator right=Equality)*
		public Group getGroup_1() { return cGroup_1; }

		//{Binary.left=current}
		public Action getBinaryLeftAction_1_0() { return cBinaryLeftAction_1_0; }

		//operator=LogicalAndOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//LogicalAndOperator
		public RuleCall getOperatorLogicalAndOperatorEnumRuleCall_1_1_0() { return cOperatorLogicalAndOperatorEnumRuleCall_1_1_0; }

		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}

	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparativeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEqualityOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparativeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality returns Expression:
		//	Comparative ({Binary.left=current} operator=EqualityOperator right=Comparative)*;
		public ParserRule getRule() { return rule; }

		//Comparative ({Binary.left=current} operator=EqualityOperator right=Comparative)*
		public Group getGroup() { return cGroup; }

		//Comparative
		public RuleCall getComparativeParserRuleCall_0() { return cComparativeParserRuleCall_0; }

		//({Binary.left=current} operator=EqualityOperator right=Comparative)*
		public Group getGroup_1() { return cGroup_1; }

		//{Binary.left=current}
		public Action getBinaryLeftAction_1_0() { return cBinaryLeftAction_1_0; }

		//operator=EqualityOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//EqualityOperator
		public RuleCall getOperatorEqualityOperatorEnumRuleCall_1_1_0() { return cOperatorEqualityOperatorEnumRuleCall_1_1_0; }

		//right=Comparative
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Comparative
		public RuleCall getRightComparativeParserRuleCall_1_2_0() { return cRightComparativeParserRuleCall_1_2_0; }
	}

	public class ComparativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorComparativeOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditiveParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparative returns Expression:
		//	Additive ({Binary.left=current} operator=ComparativeOperator right=Additive)*;
		public ParserRule getRule() { return rule; }

		//Additive ({Binary.left=current} operator=ComparativeOperator right=Additive)*
		public Group getGroup() { return cGroup; }

		//Additive
		public RuleCall getAdditiveParserRuleCall_0() { return cAdditiveParserRuleCall_0; }

		//({Binary.left=current} operator=ComparativeOperator right=Additive)*
		public Group getGroup_1() { return cGroup_1; }

		//{Binary.left=current}
		public Action getBinaryLeftAction_1_0() { return cBinaryLeftAction_1_0; }

		//operator=ComparativeOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//ComparativeOperator
		public RuleCall getOperatorComparativeOperatorEnumRuleCall_1_1_0() { return cOperatorComparativeOperatorEnumRuleCall_1_1_0; }

		//right=Additive
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Additive
		public RuleCall getRightAdditiveParserRuleCall_1_2_0() { return cRightAdditiveParserRuleCall_1_2_0; }
	}

	public class AdditiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Additive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAdditiveOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicativeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Additive returns Expression:
		//	Multiplicative ({Binary.left=current} operator=AdditiveOperator right=Multiplicative)*;
		public ParserRule getRule() { return rule; }

		//Multiplicative ({Binary.left=current} operator=AdditiveOperator right=Multiplicative)*
		public Group getGroup() { return cGroup; }

		//Multiplicative
		public RuleCall getMultiplicativeParserRuleCall_0() { return cMultiplicativeParserRuleCall_0; }

		//({Binary.left=current} operator=AdditiveOperator right=Multiplicative)*
		public Group getGroup_1() { return cGroup_1; }

		//{Binary.left=current}
		public Action getBinaryLeftAction_1_0() { return cBinaryLeftAction_1_0; }

		//operator=AdditiveOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//AdditiveOperator
		public RuleCall getOperatorAdditiveOperatorEnumRuleCall_1_1_0() { return cOperatorAdditiveOperatorEnumRuleCall_1_1_0; }

		//right=Multiplicative
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Multiplicative
		public RuleCall getRightMultiplicativeParserRuleCall_1_2_0() { return cRightMultiplicativeParserRuleCall_1_2_0; }
	}

	public class MultiplicativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplicative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimitiveParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorMultiplicativeOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimitiveParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplicative returns Expression:
		//	Primitive ({Binary.left=current} operator=MultiplicativeOperator right=Primitive)*;
		public ParserRule getRule() { return rule; }

		//Primitive ({Binary.left=current} operator=MultiplicativeOperator right=Primitive)*
		public Group getGroup() { return cGroup; }

		//Primitive
		public RuleCall getPrimitiveParserRuleCall_0() { return cPrimitiveParserRuleCall_0; }

		//({Binary.left=current} operator=MultiplicativeOperator right=Primitive)*
		public Group getGroup_1() { return cGroup_1; }

		//{Binary.left=current}
		public Action getBinaryLeftAction_1_0() { return cBinaryLeftAction_1_0; }

		//operator=MultiplicativeOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//MultiplicativeOperator
		public RuleCall getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0() { return cOperatorMultiplicativeOperatorEnumRuleCall_1_1_0; }

		//right=Primitive
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Primitive
		public RuleCall getRightPrimitiveParserRuleCall_1_2_0() { return cRightPrimitiveParserRuleCall_1_2_0; }
	}

	public class PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInRangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cString0ParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIdentifierParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//Primitive returns Expression:
		//	Unary | InRange | Integer | Boolean | String0 | Identifier | "(" Expression ")";
		public ParserRule getRule() { return rule; }

		//Unary | InRange | Integer | Boolean | String0 | Identifier | "(" Expression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Unary
		public RuleCall getUnaryParserRuleCall_0() { return cUnaryParserRuleCall_0; }

		//InRange
		public RuleCall getInRangeParserRuleCall_1() { return cInRangeParserRuleCall_1; }

		//Integer
		public RuleCall getIntegerParserRuleCall_2() { return cIntegerParserRuleCall_2; }

		//Boolean
		public RuleCall getBooleanParserRuleCall_3() { return cBooleanParserRuleCall_3; }

		//String0
		public RuleCall getString0ParserRuleCall_4() { return cString0ParserRuleCall_4; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_5() { return cIdentifierParserRuleCall_5; }

		//"(" Expression ")"
		public Group getGroup_6() { return cGroup_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_6_1() { return cExpressionParserRuleCall_6_1; }

		//")"
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }
	}

	public class UnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Unary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorUnaryOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cInnerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInnerPrimitiveParserRuleCall_1_0 = (RuleCall)cInnerAssignment_1.eContents().get(0);
		
		//Unary:
		//	operator=UnaryOperator inner=Primitive;
		public ParserRule getRule() { return rule; }

		//operator=UnaryOperator inner=Primitive
		public Group getGroup() { return cGroup; }

		//operator=UnaryOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//UnaryOperator
		public RuleCall getOperatorUnaryOperatorEnumRuleCall_0_0() { return cOperatorUnaryOperatorEnumRuleCall_0_0; }

		//inner=Primitive
		public Assignment getInnerAssignment_1() { return cInnerAssignment_1; }

		//Primitive
		public RuleCall getInnerPrimitiveParserRuleCall_1_0() { return cInnerPrimitiveParserRuleCall_1_0; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cString0ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Constant:
		//	Integer | Boolean | String0;
		public ParserRule getRule() { return rule; }

		//Integer | Boolean | String0
		public Alternatives getAlternatives() { return cAlternatives; }

		//Integer
		public RuleCall getIntegerParserRuleCall_0() { return cIntegerParserRuleCall_0; }

		//Boolean
		public RuleCall getBooleanParserRuleCall_1() { return cBooleanParserRuleCall_1; }

		//String0
		public RuleCall getString0ParserRuleCall_2() { return cString0ParserRuleCall_2; }
	}

	public class InRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParameterParameterCrossReference_0_0 = (CrossReference)cParameterAssignment_0.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_0_0_1 = (RuleCall)cParameterParameterCrossReference_0_0.eContents().get(1);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRangeValueRangeParserRuleCall_2_0 = (RuleCall)cRangeAssignment_2.eContents().get(0);
		
		//InRange:
		//	parameter=[Parameter] "in" range=ValueRange;
		public ParserRule getRule() { return rule; }

		//parameter=[Parameter] "in" range=ValueRange
		public Group getGroup() { return cGroup; }

		//parameter=[Parameter]
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//[Parameter]
		public CrossReference getParameterParameterCrossReference_0_0() { return cParameterParameterCrossReference_0_0; }

		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_0_0_1() { return cParameterParameterIDTerminalRuleCall_0_0_1; }

		//"in"
		public Keyword getInKeyword_1() { return cInKeyword_1; }

		//range=ValueRange
		public Assignment getRangeAssignment_2() { return cRangeAssignment_2; }

		//ValueRange
		public RuleCall getRangeValueRangeParserRuleCall_2_0() { return cRangeValueRangeParserRuleCall_2_0; }
	}

	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Integer");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Integer:
		//	value=EInt;
		public ParserRule getRule() { return rule; }

		//value=EInt
		public Assignment getValueAssignment() { return cValueAssignment; }

		//EInt
		public RuleCall getValueEIntParserRuleCall_0() { return cValueEIntParserRuleCall_0; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEBooleanParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Boolean:
		//	value=EBoolean;
		public ParserRule getRule() { return rule; }

		//value=EBoolean
		public Assignment getValueAssignment() { return cValueAssignment; }

		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_0() { return cValueEBooleanParserRuleCall_0; }
	}

	public class String0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "String0");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//String0 returns String:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Identifier");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cIdParameterCrossReference_0 = (CrossReference)cIdAssignment.eContents().get(0);
		private final RuleCall cIdParameterIDTerminalRuleCall_0_1 = (RuleCall)cIdParameterCrossReference_0.eContents().get(1);
		
		//Identifier:
		//	id=[Parameter];
		public ParserRule getRule() { return rule; }

		//id=[Parameter]
		public Assignment getIdAssignment() { return cIdAssignment; }

		//[Parameter]
		public CrossReference getIdParameterCrossReference_0() { return cIdParameterCrossReference_0; }

		//ID
		public RuleCall getIdParameterIDTerminalRuleCall_0_1() { return cIdParameterIDTerminalRuleCall_0_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EInt returns ecore::EInt: / * '-'? * / INT;
		public ParserRule getRule() { return rule; }

		/// * '-'? * / INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cEKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cEKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//EDouble returns ecore::EDouble: / * '-'? * / INT? "." INT (("E" | "e") "-"? INT)?;
		public ParserRule getRule() { return rule; }

		/// * '-'? * / INT? "." INT (("E" | "e") "-"? INT)?
		public Group getGroup() { return cGroup; }

		/// * '-'? * / INT?
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }

		//(("E" | "e") "-"? INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"E" | "e"
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//"E"
		public Keyword getEKeyword_3_0_0() { return cEKeyword_3_0_0; }

		//"e"
		public Keyword getEKeyword_3_0_1() { return cEKeyword_3_0_1; }

		//"-"?
		public Keyword getHyphenMinusKeyword_3_1() { return cHyphenMinusKeyword_3_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_3_2() { return cINTTerminalRuleCall_3_2; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	public class LogicalOrOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalOrOperator");
		private final EnumLiteralDeclaration cLogicalOrEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cLogicalOrOrKeyword_0 = (Keyword)cLogicalOrEnumLiteralDeclaration.eContents().get(0);
		
		//enum LogicalOrOperator returns BinaryOperator:
		//	logicalOr="or";
		public EnumRule getRule() { return rule; }

		//logicalOr="or"
		public EnumLiteralDeclaration getLogicalOrEnumLiteralDeclaration() { return cLogicalOrEnumLiteralDeclaration; }

		//"or"
		public Keyword getLogicalOrOrKeyword_0() { return cLogicalOrOrKeyword_0; }
	}

	public class LogicalAndOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalAndOperator");
		private final EnumLiteralDeclaration cLogicalAndEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cLogicalAndAndKeyword_0 = (Keyword)cLogicalAndEnumLiteralDeclaration.eContents().get(0);
		
		//enum LogicalAndOperator returns BinaryOperator:
		//	logicalAnd="and";
		public EnumRule getRule() { return rule; }

		//logicalAnd="and"
		public EnumLiteralDeclaration getLogicalAndEnumLiteralDeclaration() { return cLogicalAndEnumLiteralDeclaration; }

		//"and"
		public Keyword getLogicalAndAndKeyword_0() { return cLogicalAndAndKeyword_0; }
	}

	public class EqualityOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEqualEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNotEqualExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNotEqualEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EqualityOperator returns BinaryOperator:
		//	equal="==" | notEqual="!=";
		public EnumRule getRule() { return rule; }

		//equal="==" | notEqual="!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//equal="=="
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_0() { return cEqualEnumLiteralDeclaration_0; }

		//"=="
		public Keyword getEqualEqualsSignEqualsSignKeyword_0_0() { return cEqualEqualsSignEqualsSignKeyword_0_0; }

		//notEqual="!="
		public EnumLiteralDeclaration getNotEqualEnumLiteralDeclaration_1() { return cNotEqualEnumLiteralDeclaration_1; }

		//"!="
		public Keyword getNotEqualExclamationMarkEqualsSignKeyword_1_0() { return cNotEqualExclamationMarkEqualsSignKeyword_1_0; }
	}

	public class ComparativeOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ComparativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLessThanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLessThanLessThanSignKeyword_0_0 = (Keyword)cLessThanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThanEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanGreaterThanSignKeyword_1_0 = (Keyword)cGreaterThanEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ComparativeOperator returns BinaryOperator:
		//	lessThan="<" | greaterThan=">";
		public EnumRule getRule() { return rule; }

		//lessThan="<" | greaterThan=">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//lessThan="<"
		public EnumLiteralDeclaration getLessThanEnumLiteralDeclaration_0() { return cLessThanEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getLessThanLessThanSignKeyword_0_0() { return cLessThanLessThanSignKeyword_0_0; }

		//greaterThan=">"
		public EnumLiteralDeclaration getGreaterThanEnumLiteralDeclaration_1() { return cGreaterThanEnumLiteralDeclaration_1; }

		//">"
		public Keyword getGreaterThanGreaterThanSignKeyword_1_0() { return cGreaterThanGreaterThanSignKeyword_1_0; }
	}

	public class AdditiveOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAdditionEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAdditionPlusSignKeyword_0_0 = (Keyword)cAdditionEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSubtractionEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSubtractionHyphenMinusKeyword_1_0 = (Keyword)cSubtractionEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditiveOperator returns BinaryOperator:
		//	addition="+" | subtraction="-";
		public EnumRule getRule() { return rule; }

		//addition="+" | subtraction="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//addition="+"
		public EnumLiteralDeclaration getAdditionEnumLiteralDeclaration_0() { return cAdditionEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getAdditionPlusSignKeyword_0_0() { return cAdditionPlusSignKeyword_0_0; }

		//subtraction="-"
		public EnumLiteralDeclaration getSubtractionEnumLiteralDeclaration_1() { return cSubtractionEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getSubtractionHyphenMinusKeyword_1_0() { return cSubtractionHyphenMinusKeyword_1_0; }
	}

	public class MultiplicativeOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeOperator");
		private final EnumLiteralDeclaration cMultiplicationEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cMultiplicationAsteriskKeyword_0 = (Keyword)cMultiplicationEnumLiteralDeclaration.eContents().get(0);
		
		//enum MultiplicativeOperator returns BinaryOperator:
		//	multiplication="*";
		public EnumRule getRule() { return rule; }

		//multiplication="*"
		public EnumLiteralDeclaration getMultiplicationEnumLiteralDeclaration() { return cMultiplicationEnumLiteralDeclaration; }

		//"*"
		public Keyword getMultiplicationAsteriskKeyword_0() { return cMultiplicationAsteriskKeyword_0; }
	}

	public class UnaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInversionEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInversionHyphenMinusKeyword_0_0 = (Keyword)cInversionEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLogicalNotEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLogicalNotNotKeyword_1_0 = (Keyword)cLogicalNotEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum UnaryOperator:
		//	inversion="-" | logicalNot="not";
		public EnumRule getRule() { return rule; }

		//inversion="-" | logicalNot="not"
		public Alternatives getAlternatives() { return cAlternatives; }

		//inversion="-"
		public EnumLiteralDeclaration getInversionEnumLiteralDeclaration_0() { return cInversionEnumLiteralDeclaration_0; }

		//"-"
		public Keyword getInversionHyphenMinusKeyword_0_0() { return cInversionHyphenMinusKeyword_0_0; }

		//logicalNot="not"
		public EnumLiteralDeclaration getLogicalNotEnumLiteralDeclaration_1() { return cLogicalNotEnumLiteralDeclaration_1; }

		//"not"
		public Keyword getLogicalNotNotKeyword_1_0() { return cLogicalNotNotKeyword_1_0; }
	}
	
	private ConfiguratorElements pConfigurator;
	private AbstractParameterElements pAbstractParameter;
	private ParameterGroupElements pParameterGroup;
	private ParameterElements pParameter;
	private ValueRangeElements pValueRange;
	private EnumeratedElements pEnumerated;
	private BoundedElements pBounded;
	private ConstraintElements pConstraint;
	private ExpressionElements pExpression;
	private LogicalOrOperatorElements unknownRuleLogicalOrOperator;
	private LogicalOrElements pLogicalOr;
	private LogicalAndOperatorElements unknownRuleLogicalAndOperator;
	private LogicalAndElements pLogicalAnd;
	private EqualityOperatorElements unknownRuleEqualityOperator;
	private EqualityElements pEquality;
	private ComparativeOperatorElements unknownRuleComparativeOperator;
	private ComparativeElements pComparative;
	private AdditiveOperatorElements unknownRuleAdditiveOperator;
	private AdditiveElements pAdditive;
	private MultiplicativeOperatorElements unknownRuleMultiplicativeOperator;
	private MultiplicativeElements pMultiplicative;
	private PrimitiveElements pPrimitive;
	private UnaryOperatorElements unknownRuleUnaryOperator;
	private UnaryElements pUnary;
	private ConstantElements pConstant;
	private InRangeElements pInRange;
	private IntegerElements pInteger;
	private BooleanElements pBoolean;
	private String0Elements pString0;
	private IdentifierElements pIdentifier;
	private EIntElements pEInt;
	private EDoubleElements pEDouble;
	private EBooleanElements pEBoolean;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ConfiguratorGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.itu.smdp2015.church.Configurator".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Configurator:
	//	"configurator" name=ID description=STRING? "{" parameters+=AbstractParameter (","? parameters+=AbstractParameter)*
	//	"}";
	public ConfiguratorElements getConfiguratorAccess() {
		return (pConfigurator != null) ? pConfigurator : (pConfigurator = new ConfiguratorElements());
	}
	
	public ParserRule getConfiguratorRule() {
		return getConfiguratorAccess().getRule();
	}

	//AbstractParameter:
	//	ParameterGroup | Parameter;
	public AbstractParameterElements getAbstractParameterAccess() {
		return (pAbstractParameter != null) ? pAbstractParameter : (pAbstractParameter = new AbstractParameterElements());
	}
	
	public ParserRule getAbstractParameterRule() {
		return getAbstractParameterAccess().getRule();
	}

	//ParameterGroup:
	//	"group" name=ID description=STRING? (("visible-if" visibility=Expression)? & ("constraints" "{"
	//	constraints+=Constraint ("," constraints+=Constraint)* ","? "}")? & "{" parameters+=AbstractParameter (","?
	//	parameters+=AbstractParameter)* ","? "}");
	public ParameterGroupElements getParameterGroupAccess() {
		return (pParameterGroup != null) ? pParameterGroup : (pParameterGroup = new ParameterGroupElements());
	}
	
	public ParserRule getParameterGroupRule() {
		return getParameterGroupAccess().getRule();
	}

	//Parameter:
	//	"parameter" name=ID description=STRING? ((optional?="optional" | "mandatory")? & ("visible-if"
	//	visibility=Expression)? & ("default-value" default=Expression)? & ("constraints" "{" constraints+=Constraint (","
	//	constraints+=Constraint)* "}")? & "values" valueRange=ValueRange);
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//ValueRange:
	//	Enumerated | Bounded;
	public ValueRangeElements getValueRangeAccess() {
		return (pValueRange != null) ? pValueRange : (pValueRange = new ValueRangeElements());
	}
	
	public ParserRule getValueRangeRule() {
		return getValueRangeAccess().getRule();
	}

	//Enumerated:
	//	"(" values+=Expression ("," values+=Expression)* ")";
	public EnumeratedElements getEnumeratedAccess() {
		return (pEnumerated != null) ? pEnumerated : (pEnumerated = new EnumeratedElements());
	}
	
	public ParserRule getEnumeratedRule() {
		return getEnumeratedAccess().getRule();
	}

	//Bounded:
	//	"[" lowerBound=Expression ";" upperBound=Expression "]";
	public BoundedElements getBoundedAccess() {
		return (pBounded != null) ? pBounded : (pBounded = new BoundedElements());
	}
	
	public ParserRule getBoundedRule() {
		return getBoundedAccess().getRule();
	}

	//Constraint:
	//	("description" description=STRING)? expression=Expression;
	public ConstraintElements getConstraintAccess() {
		return (pConstraint != null) ? pConstraint : (pConstraint = new ConstraintElements());
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//Expression:
	//	LogicalOr;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//enum LogicalOrOperator returns BinaryOperator:
	//	logicalOr="or";
	public LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return (unknownRuleLogicalOrOperator != null) ? unknownRuleLogicalOrOperator : (unknownRuleLogicalOrOperator = new LogicalOrOperatorElements());
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}

	//LogicalOr returns Expression:
	//	LogicalAnd ({Binary.left=current} operator=LogicalOrOperator right=LogicalAnd)*;
	public LogicalOrElements getLogicalOrAccess() {
		return (pLogicalOr != null) ? pLogicalOr : (pLogicalOr = new LogicalOrElements());
	}
	
	public ParserRule getLogicalOrRule() {
		return getLogicalOrAccess().getRule();
	}

	//enum LogicalAndOperator returns BinaryOperator:
	//	logicalAnd="and";
	public LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return (unknownRuleLogicalAndOperator != null) ? unknownRuleLogicalAndOperator : (unknownRuleLogicalAndOperator = new LogicalAndOperatorElements());
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}

	//LogicalAnd returns Expression:
	//	Equality ({Binary.left=current} operator=LogicalAndOperator right=Equality)*;
	public LogicalAndElements getLogicalAndAccess() {
		return (pLogicalAnd != null) ? pLogicalAnd : (pLogicalAnd = new LogicalAndElements());
	}
	
	public ParserRule getLogicalAndRule() {
		return getLogicalAndAccess().getRule();
	}

	//enum EqualityOperator returns BinaryOperator:
	//	equal="==" | notEqual="!=";
	public EqualityOperatorElements getEqualityOperatorAccess() {
		return (unknownRuleEqualityOperator != null) ? unknownRuleEqualityOperator : (unknownRuleEqualityOperator = new EqualityOperatorElements());
	}
	
	public EnumRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}

	//Equality returns Expression:
	//	Comparative ({Binary.left=current} operator=EqualityOperator right=Comparative)*;
	public EqualityElements getEqualityAccess() {
		return (pEquality != null) ? pEquality : (pEquality = new EqualityElements());
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}

	//enum ComparativeOperator returns BinaryOperator:
	//	lessThan="<" | greaterThan=">";
	public ComparativeOperatorElements getComparativeOperatorAccess() {
		return (unknownRuleComparativeOperator != null) ? unknownRuleComparativeOperator : (unknownRuleComparativeOperator = new ComparativeOperatorElements());
	}
	
	public EnumRule getComparativeOperatorRule() {
		return getComparativeOperatorAccess().getRule();
	}

	//Comparative returns Expression:
	//	Additive ({Binary.left=current} operator=ComparativeOperator right=Additive)*;
	public ComparativeElements getComparativeAccess() {
		return (pComparative != null) ? pComparative : (pComparative = new ComparativeElements());
	}
	
	public ParserRule getComparativeRule() {
		return getComparativeAccess().getRule();
	}

	//enum AdditiveOperator returns BinaryOperator:
	//	addition="+" | subtraction="-";
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return (unknownRuleAdditiveOperator != null) ? unknownRuleAdditiveOperator : (unknownRuleAdditiveOperator = new AdditiveOperatorElements());
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//Additive returns Expression:
	//	Multiplicative ({Binary.left=current} operator=AdditiveOperator right=Multiplicative)*;
	public AdditiveElements getAdditiveAccess() {
		return (pAdditive != null) ? pAdditive : (pAdditive = new AdditiveElements());
	}
	
	public ParserRule getAdditiveRule() {
		return getAdditiveAccess().getRule();
	}

	//enum MultiplicativeOperator returns BinaryOperator:
	//	multiplication="*";
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return (unknownRuleMultiplicativeOperator != null) ? unknownRuleMultiplicativeOperator : (unknownRuleMultiplicativeOperator = new MultiplicativeOperatorElements());
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//Multiplicative returns Expression:
	//	Primitive ({Binary.left=current} operator=MultiplicativeOperator right=Primitive)*;
	public MultiplicativeElements getMultiplicativeAccess() {
		return (pMultiplicative != null) ? pMultiplicative : (pMultiplicative = new MultiplicativeElements());
	}
	
	public ParserRule getMultiplicativeRule() {
		return getMultiplicativeAccess().getRule();
	}

	//Primitive returns Expression:
	//	Unary | InRange | Integer | Boolean | String0 | Identifier | "(" Expression ")";
	public PrimitiveElements getPrimitiveAccess() {
		return (pPrimitive != null) ? pPrimitive : (pPrimitive = new PrimitiveElements());
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}

	//enum UnaryOperator:
	//	inversion="-" | logicalNot="not";
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return (unknownRuleUnaryOperator != null) ? unknownRuleUnaryOperator : (unknownRuleUnaryOperator = new UnaryOperatorElements());
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//Unary:
	//	operator=UnaryOperator inner=Primitive;
	public UnaryElements getUnaryAccess() {
		return (pUnary != null) ? pUnary : (pUnary = new UnaryElements());
	}
	
	public ParserRule getUnaryRule() {
		return getUnaryAccess().getRule();
	}

	//Constant:
	//	Integer | Boolean | String0;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//InRange:
	//	parameter=[Parameter] "in" range=ValueRange;
	public InRangeElements getInRangeAccess() {
		return (pInRange != null) ? pInRange : (pInRange = new InRangeElements());
	}
	
	public ParserRule getInRangeRule() {
		return getInRangeAccess().getRule();
	}

	//Integer:
	//	value=EInt;
	public IntegerElements getIntegerAccess() {
		return (pInteger != null) ? pInteger : (pInteger = new IntegerElements());
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//Boolean:
	//	value=EBoolean;
	public BooleanElements getBooleanAccess() {
		return (pBoolean != null) ? pBoolean : (pBoolean = new BooleanElements());
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//String0 returns String:
	//	value=STRING;
	public String0Elements getString0Access() {
		return (pString0 != null) ? pString0 : (pString0 = new String0Elements());
	}
	
	public ParserRule getString0Rule() {
		return getString0Access().getRule();
	}

	//Identifier:
	//	id=[Parameter];
	public IdentifierElements getIdentifierAccess() {
		return (pIdentifier != null) ? pIdentifier : (pIdentifier = new IdentifierElements());
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//EInt returns ecore::EInt: / * '-'? * / INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//EDouble returns ecore::EDouble: / * '-'? * / INT? "." INT (("E" | "e") "-"? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return (pEDouble != null) ? pEDouble : (pEDouble = new EDoubleElements());
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
